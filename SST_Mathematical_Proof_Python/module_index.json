[
  {
    "path": "GUI - 3 Fat-knots.py",
    "imports_streamlit": false,
    "module_doc": null,
    "functions": [
      {
        "name": "torus",
        "lineno": 115,
        "doc": null,
        "required_pos_args": 4
      },
      {
        "name": "rotate_xyz",
        "lineno": 121,
        "doc": null,
        "required_pos_args": 6
      },
      {
        "name": "main",
        "lineno": 285,
        "doc": null,
        "required_pos_args": 0
      },
      {
        "name": "__init__",
        "lineno": 137,
        "doc": null,
        "required_pos_args": 3
      },
      {
        "name": "initUI",
        "lineno": 143,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "slider_changed",
        "lineno": 173,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "get_params",
        "lineno": 183,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "__init__",
        "lineno": 194,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "initUI",
        "lineno": 198,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "update_plot",
        "lineno": 259,
        "doc": null,
        "required_pos_args": 1
      }
    ],
    "classes": [
      {
        "name": "RingControl",
        "lineno": 136,
        "doc": null
      },
      {
        "name": "RingPlotter",
        "lineno": 193,
        "doc": null
      }
    ],
    "candidate": "main"
  },
  {
    "path": "GUI - quarck streamlines.py",
    "imports_streamlit": false,
    "module_doc": null,
    "functions": [
      {
        "name": "triangle_positions",
        "lineno": 14,
        "doc": null,
        "required_pos_args": 2
      },
      {
        "name": "quark_circle_radius",
        "lineno": 22,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "proton_group_radius",
        "lineno": 23,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "vortex_field",
        "lineno": 36,
        "doc": null,
        "required_pos_args": 3
      },
      {
        "name": "update_plot",
        "lineno": 99,
        "doc": null,
        "required_pos_args": 0
      },
      {
        "name": "on_press",
        "lineno": 137,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "on_release",
        "lineno": 150,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "on_motion",
        "lineno": 153,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "add_proton",
        "lineno": 166,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "add_antiproton",
        "lineno": 174,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "on_spacing_slider",
        "lineno": 182,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "on_triangle_slider",
        "lineno": 186,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "on_density_slider",
        "lineno": 190,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "cb_quark_handler",
        "lineno": 194,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "__init__",
        "lineno": 26,
        "doc": null,
        "required_pos_args": 5
      },
      {
        "name": "__init__",
        "lineno": 46,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "compute_fields",
        "lineno": 61,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "find_proton",
        "lineno": 72,
        "doc": null,
        "required_pos_args": 2
      },
      {
        "name": "find_remove",
        "lineno": 81,
        "doc": null,
        "required_pos_args": 2
      },
      {
        "name": "update_protons_from_controls",
        "lineno": 89,
        "doc": null,
        "required_pos_args": 1
      }
    ],
    "classes": [
      {
        "name": "Proton",
        "lineno": 25,
        "doc": null
      },
      {
        "name": "ProtonManager",
        "lineno": 45,
        "doc": null
      }
    ],
    "candidate": null
  },
  {
    "path": "GUI-biot-savart_COIL sim.py",
    "imports_streamlit": false,
    "module_doc": null,
    "functions": [
      {
        "name": "__init__",
        "lineno": 12,
        "doc": null,
        "required_pos_args": 2
      },
      {
        "name": "_create_controls",
        "lineno": 35,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "_create_plot_canvas",
        "lineno": 64,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "toggle_animation",
        "lineno": 70,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "animate",
        "lineno": 75,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "waveform_value",
        "lineno": 81,
        "doc": null,
        "required_pos_args": 3
      },
      {
        "name": "update_plot",
        "lineno": 95,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "draw_field",
        "lineno": 142,
        "doc": null,
        "required_pos_args": 4
      }
    ],
    "classes": [
      {
        "name": "AnimatedCoilApp",
        "lineno": 11,
        "doc": null
      }
    ],
    "candidate": null
  },
  {
    "path": "GUI-MagnetCircleRodin.py",
    "imports_streamlit": false,
    "module_doc": null,
    "functions": [
      {
        "name": "saving",
        "lineno": 42,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "generate_rodin_starship",
        "lineno": 47,
        "doc": null,
        "required_pos_args": 0
      },
      {
        "name": "_biot_savart_wire_numpy",
        "lineno": 56,
        "doc": "Vectorized NumPy fallback for Biot–Savart over polyline.",
        "required_pos_args": 4
      },
      {
        "name": "biot_savart_wire",
        "lineno": 86,
        "doc": null,
        "required_pos_args": 4
      },
      {
        "name": "generate_dipole_ring",
        "lineno": 99,
        "doc": null,
        "required_pos_args": 2
      },
      {
        "name": "_magnetic_field_dipoles_numpy",
        "lineno": 118,
        "doc": "Vectorized dipole superposition on the grid (NumPy fallback).",
        "required_pos_args": 5
      },
      {
        "name": "compute_dipole_field_from_orientations",
        "lineno": 153,
        "doc": null,
        "required_pos_args": 5
      },
      {
        "name": "compute_all_fields_and_geometry",
        "lineno": 176,
        "doc": null,
        "required_pos_args": 0
      },
      {
        "name": "update_plot",
        "lineno": 206,
        "doc": null,
        "required_pos_args": 0
      },
      {
        "name": "on_field_checkbox",
        "lineno": 266,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "on_geom_checkbox",
        "lineno": 271,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "update_params",
        "lineno": 276,
        "doc": null,
        "required_pos_args": 1
      }
    ],
    "classes": [],
    "candidate": null
  },
  {
    "path": "GUI-MagneticRingAdjuster.py",
    "imports_streamlit": false,
    "module_doc": null,
    "functions": [
      {
        "name": "generate_ring",
        "lineno": 24,
        "doc": null,
        "required_pos_args": 4
      },
      {
        "name": "draw_correctly_aligned_cube",
        "lineno": 45,
        "doc": null,
        "required_pos_args": 3
      },
      {
        "name": "update_plot",
        "lineno": 69,
        "doc": null,
        "required_pos_args": 4
      },
      {
        "name": "slider_update",
        "lineno": 122,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "check_update",
        "lineno": 126,
        "doc": null,
        "required_pos_args": 1
      }
    ],
    "classes": [],
    "candidate": null
  },
  {
    "path": "GUI-SawBowl.py",
    "imports_streamlit": false,
    "module_doc": null,
    "functions": [
      {
        "name": "alternating_skip_indices",
        "lineno": 48,
        "doc": null,
        "required_pos_args": 4
      },
      {
        "name": "r_profile",
        "lineno": 61,
        "doc": null,
        "required_pos_args": 5
      },
      {
        "name": "build_straight_phase",
        "lineno": 69,
        "doc": null,
        "required_pos_args": 4
      },
      {
        "name": "build_curved_phase",
        "lineno": 81,
        "doc": null,
        "required_pos_args": 4
      },
      {
        "name": "redraw",
        "lineno": 122,
        "doc": null,
        "required_pos_args": 0
      }
    ],
    "classes": [],
    "candidate": null
  },
  {
    "path": "GUI-SawShapeCoil.py",
    "imports_streamlit": false,
    "module_doc": null,
    "functions": [
      {
        "name": "generate_alternating_skip_sequence",
        "lineno": 26,
        "doc": null,
        "required_pos_args": 3
      },
      {
        "name": "get_wire_arrows",
        "lineno": 44,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "compute_field_vectors",
        "lineno": 55,
        "doc": null,
        "required_pos_args": 5
      },
      {
        "name": "plot_wires",
        "lineno": 91,
        "doc": null,
        "required_pos_args": 5
      },
      {
        "name": "compute_everything",
        "lineno": 105,
        "doc": null,
        "required_pos_args": 0
      },
      {
        "name": "update_plot",
        "lineno": 123,
        "doc": null,
        "required_pos_args": 0
      },
      {
        "name": "on_checkbox",
        "lineno": 190,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "on_param_submit",
        "lineno": 193,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "on_preset",
        "lineno": 227,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "on_color_mode",
        "lineno": 246,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "on_slider_change",
        "lineno": 287,
        "doc": null,
        "required_pos_args": 1
      }
    ],
    "classes": [],
    "candidate": null
  },
  {
    "path": "GUI_knots-toggle-autoknot.py",
    "imports_streamlit": false,
    "module_doc": null,
    "functions": [
      {
        "name": "parse_fseries_multi",
        "lineno": 15,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "eval_fourier_block",
        "lineno": 41,
        "doc": null,
        "required_pos_args": 2
      },
      {
        "name": "compute_curvature",
        "lineno": 52,
        "doc": null,
        "required_pos_args": 3
      },
      {
        "name": "redraw",
        "lineno": 99,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "toggle_effects",
        "lineno": 153,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "select_all",
        "lineno": 158,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "deselect_all",
        "lineno": 170,
        "doc": null,
        "required_pos_args": 1
      }
    ],
    "classes": [],
    "candidate": null
  },
  {
    "path": "GUI_vam_fseries.py",
    "imports_streamlit": false,
    "module_doc": null,
    "functions": [
      {
        "name": "varphi_fixed_point",
        "lineno": 35,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "load_matrix_fseries",
        "lineno": 48,
        "doc": "Load .fseries coefficients. Pad/truncate to 6 columns, fill missing with 0.0 (not NaN).",
        "required_pos_args": 1
      },
      {
        "name": "load_fseries_best_block",
        "lineno": 72,
        "doc": "Parse .fseries into blocks separated by '%' or blank lines.\nKeep only the block with the most rows. Each row must have 6 floats.",
        "required_pos_args": 1
      },
      {
        "name": "eval_series",
        "lineno": 110,
        "doc": "Return r(t) and r'(t) from Fourier coefficients (1-based harmonics).\ncoeffs shape: (N,6) with columns [Ax, Bx, Ay, By, Az, Bz]; row j -> harmonic n=j+1.",
        "required_pos_args": 2
      },
      {
        "name": "resample_closed_polyline",
        "lineno": 138,
        "doc": "Resample a closed polyline to M points, uniformly in arclength.",
        "required_pos_args": 2
      },
      {
        "name": "derivatives_from_uniform_samples",
        "lineno": 164,
        "doc": "Central-difference derivative r'(t) assuming uniform t-grid on [0,2pi).",
        "required_pos_args": 1
      },
      {
        "name": "writhe_gauss",
        "lineno": 173,
        "doc": "Discretized Gauss integral. Costs O(M^2); downsample to maxM points.",
        "required_pos_args": 3
      },
      {
        "name": "random_unit_vectors",
        "lineno": 193,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "estimate_crossing_number",
        "lineno": 199,
        "doc": "Projection-based crossing estimator. Downsample to maxM for speed.",
        "required_pos_args": 1
      },
      {
        "name": "parse_knot_id_from_filename",
        "lineno": 242,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "load_stl",
        "lineno": 252,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "run_batch",
        "lineno": 297,
        "doc": null,
        "required_pos_args": 2
      },
      {
        "name": "clean_dataframe",
        "lineno": 444,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "quick_preview_any",
        "lineno": 466,
        "doc": null,
        "required_pos_args": 2
      },
      {
        "name": "quick_status",
        "lineno": 519,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "discover_ids",
        "lineno": 1040,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "main",
        "lineno": 1049,
        "doc": null,
        "required_pos_args": 0
      },
      {
        "name": "flush",
        "lineno": 78,
        "doc": null,
        "required_pos_args": 0
      },
      {
        "name": "__init__",
        "lineno": 571,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "_build_widgets",
        "lineno": 614,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "_on_root_change",
        "lineno": 739,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "browse_root",
        "lineno": 749,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "browse_out",
        "lineno": 754,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "browse_meta",
        "lineno": 761,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "browse_emit_meta",
        "lineno": 768,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "log",
        "lineno": 775,
        "doc": null,
        "required_pos_args": 2
      },
      {
        "name": "set_busy",
        "lineno": 780,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "on_quality_change",
        "lineno": 786,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "apply_quality_profile",
        "lineno": 789,
        "doc": null,
        "required_pos_args": 2
      },
      {
        "name": "on_emit_meta",
        "lineno": 798,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "on_scan",
        "lineno": 835,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "_on_tree_select",
        "lineno": 867,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "on_preview_selected",
        "lineno": 871,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "on_run",
        "lineno": 925,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "_run_batch_thread",
        "lineno": 928,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "on_show_results",
        "lineno": 981,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "show_results_window",
        "lineno": 996,
        "doc": null,
        "required_pos_args": 2
      },
      {
        "name": "save_df_as",
        "lineno": 1029,
        "doc": null,
        "required_pos_args": 2
      },
      {
        "name": "col",
        "lineno": 320,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "orient",
        "lineno": 230,
        "doc": null,
        "required_pos_args": 3
      }
    ],
    "classes": [
      {
        "name": "App",
        "lineno": 570,
        "doc": null
      }
    ],
    "candidate": "main"
  },
  {
    "path": "SST_Classify_Particles_from_Knots/Classify_Particles_by_Analytical_Formula.py",
    "imports_streamlit": false,
    "module_doc": null,
    "functions": [
      {
        "name": "classify_particle",
        "lineno": 108,
        "doc": "Classifies a particle using a hybrid, three-step approach.\n1. Checks for a canonical knot name in the filename.\n2. Checks for the signature of an achiral knot (a_mu ≈ -0.5).\n3. If not found, falls back to numerical a_mu ranges for exotic chiral knots.",
        "required_pos_args": 2
      },
      {
        "name": "load_fourier_series_clean",
        "lineno": 135,
        "doc": "Loads Fourier series coefficients from a .fseries file.",
        "required_pos_args": 1
      },
      {
        "name": "compute_invariants_from_coeffs",
        "lineno": 156,
        "doc": "Computes helicity invariants directly from Fourier coefficients.\nThis is a faster, analytical method.",
        "required_pos_args": 1
      },
      {
        "name": "analyze_knots",
        "lineno": 176,
        "doc": "Analyzes all .fseries files in a directory and classifies them.",
        "required_pos_args": 0
      },
      {
        "name": "plot_amu_histogram",
        "lineno": 207,
        "doc": "Plots a histogram of the calculated a_mu values.",
        "required_pos_args": 1
      }
    ],
    "classes": [],
    "candidate": null
  },
  {
    "path": "SST_Helicity_3-Ranges_from_Knots/HelicityCalculationVAMcore.py",
    "imports_streamlit": false,
    "module_doc": null,
    "functions": [
      {
        "name": "parse_fseries_multi",
        "lineno": 22,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "eval_fourier_block",
        "lineno": 51,
        "doc": null,
        "required_pos_args": 2
      },
      {
        "name": "compute_biot_savart_velocity",
        "lineno": 72,
        "doc": null,
        "required_pos_args": 4
      },
      {
        "name": "compute_vorticity_full_grid",
        "lineno": 91,
        "doc": null,
        "required_pos_args": 3
      },
      {
        "name": "extract_interior_field",
        "lineno": 109,
        "doc": null,
        "required_pos_args": 3
      },
      {
        "name": "helicity_at",
        "lineno": 112,
        "doc": null,
        "required_pos_args": 0
      },
      {
        "name": "compute_a_mu_for_file",
        "lineno": 123,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "base_id",
        "lineno": 137,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "series",
        "lineno": 64,
        "doc": null,
        "required_pos_args": 2
      }
    ],
    "classes": [],
    "candidate": null
  },
  {
    "path": "SST_Helicity_Canon_Evidence/canon_evidence.py",
    "imports_streamlit": false,
    "module_doc": null,
    "functions": [
      {
        "name": "parse_fseries_multi",
        "lineno": 14,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "base_id",
        "lineno": 37,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "eval_fourier_block",
        "lineno": 43,
        "doc": null,
        "required_pos_args": 2
      },
      {
        "name": "resample_by_arclength",
        "lineno": 59,
        "doc": null,
        "required_pos_args": 3
      },
      {
        "name": "biot_savart_velocity",
        "lineno": 69,
        "doc": null,
        "required_pos_args": 2
      },
      {
        "name": "curl3d",
        "lineno": 90,
        "doc": null,
        "required_pos_args": 3
      },
      {
        "name": "make_grid",
        "lineno": 104,
        "doc": null,
        "required_pos_args": 2
      },
      {
        "name": "a_mu_for_file",
        "lineno": 116,
        "doc": null,
        "required_pos_args": 3
      },
      {
        "name": "classify",
        "lineno": 138,
        "doc": null,
        "required_pos_args": 2
      },
      {
        "name": "series",
        "lineno": 54,
        "doc": null,
        "required_pos_args": 2
      },
      {
        "name": "interp",
        "lineno": 65,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "emoji",
        "lineno": 168,
        "doc": null,
        "required_pos_args": 2
      }
    ],
    "classes": [],
    "candidate": null
  },
  {
    "path": "SST_Helicity_Canon_Evidence/canon_evidence_swirl_strings.py",
    "imports_streamlit": false,
    "module_doc": null,
    "functions": [
      {
        "name": "parse_fseries_multi",
        "lineno": 14,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "base_id",
        "lineno": 36,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "eval_fourier_block",
        "lineno": 42,
        "doc": null,
        "required_pos_args": 2
      },
      {
        "name": "resample_by_arclength",
        "lineno": 53,
        "doc": null,
        "required_pos_args": 3
      },
      {
        "name": "biot_savart_swirl",
        "lineno": 62,
        "doc": null,
        "required_pos_args": 2
      },
      {
        "name": "curl3d_central_fallback",
        "lineno": 81,
        "doc": null,
        "required_pos_args": 3
      },
      {
        "name": "make_leaf_grid",
        "lineno": 92,
        "doc": null,
        "required_pos_args": 2
      },
      {
        "name": "a_SST_for_file",
        "lineno": 103,
        "doc": null,
        "required_pos_args": 3
      },
      {
        "name": "classify",
        "lineno": 121,
        "doc": null,
        "required_pos_args": 2
      },
      {
        "name": "series",
        "lineno": 50,
        "doc": null,
        "required_pos_args": 2
      },
      {
        "name": "interp",
        "lineno": 58,
        "doc": null,
        "required_pos_args": 1
      }
    ],
    "classes": [],
    "candidate": null
  },
  {
    "path": "SST_Helicity_Canon_Evidence/FourierSeriesFromKnotPoints.py",
    "imports_streamlit": false,
    "module_doc": null,
    "functions": [
      {
        "name": "fourier_coeffs",
        "lineno": 238,
        "doc": null,
        "required_pos_args": 3
      }
    ],
    "classes": [],
    "candidate": null
  },
  {
    "path": "SST_Helicity_Canon_Evidence/helicity2.py",
    "imports_streamlit": false,
    "module_doc": null,
    "functions": [
      {
        "name": "load_fourier_series_clean",
        "lineno": 6,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "reconstruct_knot",
        "lineno": 23,
        "doc": null,
        "required_pos_args": 6
      },
      {
        "name": "compute_biot_savart_velocity",
        "lineno": 31,
        "doc": null,
        "required_pos_args": 4
      },
      {
        "name": "compute_vorticity_full_grid",
        "lineno": 46,
        "doc": null,
        "required_pos_args": 3
      },
      {
        "name": "extract_interior_field",
        "lineno": 56,
        "doc": null,
        "required_pos_args": 3
      },
      {
        "name": "to_longtable",
        "lineno": 123,
        "doc": null,
        "required_pos_args": 1
      }
    ],
    "classes": [],
    "candidate": null
  },
  {
    "path": "SST_Helicity_Canon_Evidence/HelicityCalculation.py",
    "imports_streamlit": false,
    "module_doc": null,
    "functions": [
      {
        "name": "parse_fseries_multi",
        "lineno": 4,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "eval_fourier_block",
        "lineno": 30,
        "doc": null,
        "required_pos_args": 2
      },
      {
        "name": "compute_biot_savart_velocity",
        "lineno": 41,
        "doc": null,
        "required_pos_args": 4
      },
      {
        "name": "compute_vorticity_full_grid",
        "lineno": 55,
        "doc": null,
        "required_pos_args": 3
      },
      {
        "name": "extract_interior_field",
        "lineno": 64,
        "doc": null,
        "required_pos_args": 3
      },
      {
        "name": "helicity_at",
        "lineno": 83,
        "doc": null,
        "required_pos_args": 0
      },
      {
        "name": "compute_a_mu_for_file",
        "lineno": 94,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "base_id",
        "lineno": 141,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "to_longtable",
        "lineno": 180,
        "doc": null,
        "required_pos_args": 1
      }
    ],
    "classes": [],
    "candidate": null
  },
  {
    "path": "SST_Helicity_Canon_Evidence/HelicityCalculationVAMcore.py",
    "imports_streamlit": false,
    "module_doc": null,
    "functions": [
      {
        "name": "parse_fseries_multi",
        "lineno": 22,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "eval_fourier_block",
        "lineno": 51,
        "doc": null,
        "required_pos_args": 2
      },
      {
        "name": "compute_biot_savart_velocity",
        "lineno": 72,
        "doc": null,
        "required_pos_args": 4
      },
      {
        "name": "compute_vorticity_full_grid",
        "lineno": 91,
        "doc": null,
        "required_pos_args": 3
      },
      {
        "name": "extract_interior_field",
        "lineno": 109,
        "doc": null,
        "required_pos_args": 3
      },
      {
        "name": "helicity_at",
        "lineno": 112,
        "doc": null,
        "required_pos_args": 0
      },
      {
        "name": "compute_a_mu_for_file",
        "lineno": 123,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "base_id",
        "lineno": 137,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "series",
        "lineno": 64,
        "doc": null,
        "required_pos_args": 2
      }
    ],
    "classes": [],
    "candidate": null
  },
  {
    "path": "SST_Helicity_Canon_Evidence/hyperbolic_volume_from_fseries.py",
    "imports_streamlit": false,
    "module_doc": null,
    "functions": [
      {
        "name": "eval_fourier_block",
        "lineno": 5,
        "doc": null,
        "required_pos_args": 2
      },
      {
        "name": "parse_fseries_multi",
        "lineno": 14,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "pd_from_polyline",
        "lineno": 36,
        "doc": null,
        "required_pos_args": 3
      },
      {
        "name": "hyperbolic_volume_from_fseries",
        "lineno": 84,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "series",
        "lineno": 9,
        "doc": null,
        "required_pos_args": 2
      },
      {
        "name": "seg_inter",
        "lineno": 51,
        "doc": null,
        "required_pos_args": 4
      }
    ],
    "classes": [],
    "candidate": null
  },
  {
    "path": "SST_Helicity_Canon_Evidence/knots.py",
    "imports_streamlit": false,
    "module_doc": null,
    "functions": [
      {
        "name": "parse_fseries_multi",
        "lineno": 13,
        "doc": "Parse a .fseries file, yielding (header, coeffs) for each block.",
        "required_pos_args": 1
      },
      {
        "name": "eval_fourier",
        "lineno": 60,
        "doc": null,
        "required_pos_args": 7
      },
      {
        "name": "plot_knots_grid_auto",
        "lineno": 72,
        "doc": null,
        "required_pos_args": 1
      }
    ],
    "classes": [],
    "candidate": null
  },
  {
    "path": "SST_Hyperbolic_Volume_Knots/fseries.py",
    "imports_streamlit": false,
    "module_doc": null,
    "functions": [
      {
        "name": "load_matrix",
        "lineno": 22,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "eval_series",
        "lineno": 44,
        "doc": "Return r(t) and r'(t) from Fourier coefficients.\ncoeffs shape: (N,6) columns [Ax, Bx, Ay, By, Az, Bz]; nth row -> harmonic n.",
        "required_pos_args": 2
      },
      {
        "name": "curve_length",
        "lineno": 65,
        "doc": null,
        "required_pos_args": 2
      },
      {
        "name": "writhe_gauss",
        "lineno": 68,
        "doc": "Discretized Gauss integral. Costs O(M^2); downsample to maxM points.",
        "required_pos_args": 3
      },
      {
        "name": "random_unit_vectors",
        "lineno": 88,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "estimate_crossing_number",
        "lineno": 94,
        "doc": "Projection-based crossing estimator. Downsample to maxM for speed.",
        "required_pos_args": 1
      },
      {
        "name": "parse_knot_id_from_filename",
        "lineno": 137,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "main",
        "lineno": 146,
        "doc": null,
        "required_pos_args": 0
      },
      {
        "name": "col",
        "lineno": 168,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "orient",
        "lineno": 125,
        "doc": null,
        "required_pos_args": 3
      }
    ],
    "classes": [],
    "candidate": "main"
  },
  {
    "path": "SST_Hyperbolic_Volume_Knots/vamcore_batch_hypvol_from_fseries.py",
    "imports_streamlit": false,
    "module_doc": null,
    "functions": [
      {
        "name": "_selfcheck",
        "lineno": 45,
        "doc": null,
        "required_pos_args": 0
      },
      {
        "name": "_hyperbolic_volume_from_pd",
        "lineno": 63,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "_vol_try_both_conventions",
        "lineno": 68,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "load_fseries",
        "lineno": 86,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "eval_series",
        "lineno": 107,
        "doc": "coeffs: list of [Ax,Bx, Ay,By, Az,Bz] per harmonic index n (row n -> harmonic n)\nreturn: list/array of 3D points r_k for k=0..M-1 on t in [0,2π)",
        "required_pos_args": 2
      },
      {
        "name": "_unit_random_dir",
        "lineno": 140,
        "doc": null,
        "required_pos_args": 0
      },
      {
        "name": "_orthonormal_basis",
        "lineno": 146,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "_dot",
        "lineno": 155,
        "doc": null,
        "required_pos_args": 2
      },
      {
        "name": "preprocess_curve",
        "lineno": 157,
        "doc": "Center and normalize curve to unit RMS radius.\nAccepts list/ndarray (N,3) and returns same type as input (numpy if available).",
        "required_pos_args": 1
      },
      {
        "name": "project_curve",
        "lineno": 178,
        "doc": null,
        "required_pos_args": 2
      },
      {
        "name": "_seg_intersection",
        "lineno": 194,
        "doc": null,
        "required_pos_args": 4
      },
      {
        "name": "build_pd_from_projection",
        "lineno": 206,
        "doc": null,
        "required_pos_args": 3
      },
      {
        "name": "_pd_from_curve_py",
        "lineno": 282,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "pd_from_curve",
        "lineno": 303,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "parse_knot_id",
        "lineno": 336,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "process_file",
        "lineno": 344,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "main",
        "lineno": 357,
        "doc": null,
        "required_pos_args": 0
      },
      {
        "name": "swap",
        "lineno": 71,
        "doc": null,
        "required_pos_args": 1
      }
    ],
    "classes": [],
    "candidate": "main"
  },
  {
    "path": "SST_Hyperbolic_Volume_Knots/vam_batch_hypvol_from_fseries.py",
    "imports_streamlit": false,
    "module_doc": "vam_batch_hypvol_from_fseries.py\nIterate over ./knots/*/*.fseries → build PD from a projection of the curve → compute hyperbolic volume.\n\nInputs:\n  - Root: ./knots by default; looks for ./knots/*/*.fseries (e.g., ./knots/4_1/4_1.fseries)\nOutputs:\n  - CSV with columns: knot_id, file, n_crossings, volume, projection_tries, status, message\n\nNotes\n  • This uses ONLY standard library + (optional) numpy if present. If numpy is not available,\n    it falls back to pure Python math for core steps (slower).\n  • The hyperbolic volume engine is imported from `vam_hypvol_no_deps.py` (no third-party deps).\n  • PD extraction is generic and works best for prime, alternating knots; nonalternating or\n    nearly-tangential projections may require more tries or a higher sample count.\n\nUsage\n  python vam_batch_hypvol_from_fseries.py       --root ./knots       --out  ./knots/hypvol_results.csv       --samples 1600       --tries 40",
    "functions": [
      {
        "name": "load_fseries",
        "lineno": 49,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "eval_series",
        "lineno": 70,
        "doc": "coeffs: list of [Ax,Bx, Ay,By, Az,Bz] per harmonic index n (row n -> harmonic n)\nreturn: list of 3D points r_k for k=0..M-1 on t in [0,2π)",
        "required_pos_args": 2
      },
      {
        "name": "_unit_random_dir",
        "lineno": 103,
        "doc": null,
        "required_pos_args": 0
      },
      {
        "name": "_orthonormal_basis",
        "lineno": 109,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "_dot",
        "lineno": 121,
        "doc": null,
        "required_pos_args": 2
      },
      {
        "name": "project_curve",
        "lineno": 123,
        "doc": null,
        "required_pos_args": 2
      },
      {
        "name": "_seg_intersection",
        "lineno": 139,
        "doc": "Return (lam, mu) if segments p(lam)=p1+lam*(p2-p1), q(mu)=q1+mu*(q2-q1) intersect in 2D interior,\nelse None. Avoid near-colinear or endpoint hits.",
        "required_pos_args": 4
      },
      {
        "name": "build_pd_from_projection",
        "lineno": 155,
        "doc": "P2: Nx2 points (projected), D: Nx depth values, closed polyline with segments i→i+1 (mod N)\nReturns PD code [(a,b,c,d), ...] or raises ValueError if no generic crossing diagram was found.\n\nAlgorithm:\n  1) Find all interior segment intersections (i,j) with |i-j|>1 and not endpoints.\n  2) For each crossing, compute depth difference along 'depth_dir' to decide over/under.\n  3) Build the list of \"events\" along the oriented curve (parameter s ∈ [0,1)): two per crossing.\n  4) Create arc labels between consecutive events (circularly); label k = edge between event k and k+1.\n  5) For each crossing, assemble (a,b,c,d) with positions 1 and 3 (b,d) = over, and 0 and 2 (a,c) = under.",
        "required_pos_args": 3
      },
      {
        "name": "pd_from_curve",
        "lineno": 256,
        "doc": "Try multiple random projection directions; return the first PD that validates.\nHeuristic: prefer projections with larger min crossing angle and larger depth gaps.",
        "required_pos_args": 1
      },
      {
        "name": "parse_knot_id",
        "lineno": 286,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "process_file",
        "lineno": 296,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "main",
        "lineno": 306,
        "doc": null,
        "required_pos_args": 0
      }
    ],
    "classes": [],
    "candidate": "main"
  },
  {
    "path": "SST_Hyperbolic_Volume_Knots/vam_hypvol_no_deps.py",
    "imports_streamlit": false,
    "module_doc": "vam_hypvol_no_deps.py  —  Standalone hyperbolic volume from PD code (no 3rd-party deps)\n\nAPI:\n  - hyperbolic_volume_from_pd(pd, verbose=False) -> float\n      pd: list of 4-tuples (a,b,c,d) = crossing half-edge labels; every label appears exactly twice.\n      (a,c) under-strand, (b,d) over-strand, cyclic order consistent.\n\n  - volume_from_shapes(z_list) -> float\n  - bloch_wigner(z), dilog(z)  (Bloch–Wigner and Spence dilog, stable regions)\n\nNotes:\n  • Triangulation: octahedron per crossing, split into 5 ideal tetrahedra.\n  • Equations: product of edge-shapes = 1; completeness at cusps (here: a small set of generic\n    peripheral cycles to bias the complete structure in alternating cases).\n  • Solver: damped complex Newton via normal equations; no external linear algebra.\n  • This minimal triangulation works well for prime, alternating diagrams (e.g., 4_1).\n    Canonical retriangulation / 2–0, 3–2 Pachner moves are out of scope here for brevity.\n\nSelf-test:\n  - volume_figure_eight_canonical(): 2 * v3  (v3 = volume of regular ideal tetra)\n  - pd_figure_eight(): a 4-crossing PD variant; hyperbolic_volume_from_pd(pd_figure_eight())\n    ≈ 2.02988322\n\nReferences (for the math implemented here):\n  - Thurston (1979) — hyperbolic structures via ideal tetrahedra, gluing & completeness\n  - Neumann–Zagier (1985) — gluing equations, Bloch–Wigner volume\n  - Lewin (1981) — polylogarithms, Spence identities",
    "functions": [
      {
        "name": "_clog",
        "lineno": 38,
        "doc": "Principal complex log (branch continuity handled by Newton path).",
        "required_pos_args": 1
      },
      {
        "name": "dilog",
        "lineno": 42,
        "doc": "Spence dilogarithm Li2(z), implemented with region reduction + power series.\nRegions:\n  • |z| <= 0.5:   Li2(z) = sum_{k>=1} z^k / k^2\n  • z → 1-z:      Li2(z) = pi^2/6 - ln z ln(1-z) - Li2(1-z)\n  • z → 1/z:      Li2(z) = -pi^2/6 - 1/2 ln(-z)^2 - Li2(1/z)\nBranches: principal logs; Newton continuation keeps consistency.",
        "required_pos_args": 1
      },
      {
        "name": "bloch_wigner",
        "lineno": 80,
        "doc": "Bloch–Wigner dilogarithm:\n  D(z) = Im(Li2(z)) + arg(1-z) * ln|z|",
        "required_pos_args": 1
      },
      {
        "name": "volume_of_shape",
        "lineno": 87,
        "doc": "Volume of an oriented ideal tetrahedron with shape parameter z (Im z > 0).",
        "required_pos_args": 1
      },
      {
        "name": "volume_from_shapes",
        "lineno": 91,
        "doc": "Sum of ideal tetra volumes for a list of shapes.",
        "required_pos_args": 1
      },
      {
        "name": "hyperbolic_volume_from_pd",
        "lineno": 251,
        "doc": "Compute hyperbolic volume from a PD code:\n  PD → octahedron per crossing → 5 tetra per octa → gluing & completeness → Newton → sum D(z).\nPD format: list of (a,b,c,d); (a,c) under-strand, (b,d) over-strand; each label appears exactly twice.",
        "required_pos_args": 1
      },
      {
        "name": "volume_figure_eight_canonical",
        "lineno": 317,
        "doc": "Known 2-tetra triangulation of 4_1 has both shapes regular: z = exp(i*pi/3).",
        "required_pos_args": 0
      },
      {
        "name": "pd_figure_eight",
        "lineno": 322,
        "doc": "A simple 4-crossing PD that works with the minimal octahedron→5-tetra scheme above.\nLabels 1..8 each appear exactly twice; alternating orientation.",
        "required_pos_args": 0
      },
      {
        "name": "__init__",
        "lineno": 114,
        "doc": null,
        "required_pos_args": 2
      },
      {
        "name": "add_edge_equation",
        "lineno": 120,
        "doc": null,
        "required_pos_args": 2
      },
      {
        "name": "add_peripheral_equation",
        "lineno": 123,
        "doc": null,
        "required_pos_args": 2
      },
      {
        "name": "dlog_edge_shape",
        "lineno": 127,
        "doc": "d/dz log f(z) for f ∈ {z, 1/(1-z), 1-1/z} → {1/z, 1/(1-z), 1/(z(z-1))}",
        "required_pos_args": 2
      },
      {
        "name": "solve_shapes_newton",
        "lineno": 138,
        "doc": "Solve edge + peripheral equations in log form. We target sum(log(..)) = 0\nassuming branch choices tracked continuously from the initial guess.\nReturns the list of shapes z_j (aiming for Im z_j > 0).",
        "required_pos_args": 1
      },
      {
        "name": "volume",
        "lineno": 243,
        "doc": null,
        "required_pos_args": 2
      },
      {
        "name": "tid",
        "lineno": 272,
        "doc": null,
        "required_pos_args": 2
      },
      {
        "name": "cmat_to_real",
        "lineno": 188,
        "doc": null,
        "required_pos_args": 2
      }
    ],
    "classes": [
      {
        "name": "IdealTriangulation",
        "lineno": 100,
        "doc": "Store a minimal ideal triangulation:\n  - Tetra shapes z_j (unknowns)\n  - Edge equations: sum log(edge-shape) = 2πi k  (we target 0 via branch continuity)\n  - Peripheral equations: likewise for cusp loops (here: generic cycles)\n\nEdge-shape choices per tetra edge are encoded as 'which' ∈ {0,1,2}:\n  0 → z\n  1 → z'  = 1/(1-z)\n  2 → z'' = 1 - 1/z\n\nWe solve with damped Newton on the complex system via normal equations (no deps)."
      }
    ],
    "candidate": null
  },
  {
    "path": "SST_Mass_Invariant_3-modes/SST-Muon_calculation.py",
    "imports_streamlit": false,
    "module_doc": "SST_INVARIANT_MASS.py (with Muon Ropelength Calculation)\nAuthor: Omar Iskandarani\nDate: 2025-08-25\n\nPurpose\n-------\nA canonical, topology-driven implementation of the Swirl-String Theory (SST)\nInvariant Master Mass Formula. This version is extended to calculate the\nrequired ropelength (L_tot) for the muon, based on its proposed topological\nassignment as the cinquefoil knot (5_1).\n\nInvariant Master Formula (Canon)\n--------------------------------\nM(T) = (4/α) * b(T)⁻³/² * φ⁻ᵍ⁽ᵀ⁾ * n(T)⁻¹/φ * ( (1/2)ρ_core * v_swirl² ) * (π * r_c³ * L_tot(T)) / c²",
    "functions": [
      {
        "name": "master_mass_invariant",
        "lineno": 61,
        "doc": "M(T) = (4/α) * b⁻³/² * φ⁻ᵍ * n⁻¹/φ * ( (1/2)ρ v² ) * (π r_c³ L_tot) / c²\nReturns mass in kg.",
        "required_pos_args": 1
      },
      {
        "name": "solve_for_L_tot",
        "lineno": 91,
        "doc": "Generic function to solve for L_tot given a known mass and base topology.",
        "required_pos_args": 2
      },
      {
        "name": "fit_quark_geom_factors_for_baryons",
        "lineno": 108,
        "doc": "Fit (s_u, s_d) so that proton and neutron match CODATA masses exactly.",
        "required_pos_args": 4
      },
      {
        "name": "get_particle_topologies",
        "lineno": 126,
        "doc": "Defines the canonical topologies for fundamental particles.",
        "required_pos_args": 0
      },
      {
        "name": "emoji_marker",
        "lineno": 159,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "main",
        "lineno": 174,
        "doc": null,
        "required_pos_args": 0
      }
    ],
    "classes": [
      {
        "name": "KnotTopology",
        "lineno": 49,
        "doc": "Stores the topological and geometric invariants for a particle."
      }
    ],
    "candidate": "main"
  },
  {
    "path": "SST_Mass_Invariant_3-modes/SST_INVARIANT_MASS3-1.py",
    "imports_streamlit": false,
    "module_doc": "SST_INVARIANT_MASS.py\nAuthor: Omar Iskandarani\nDate: 2025-08-25\n\nPurpose\n-------\nA canonical, topology-driven implementation of the Swirl-String Theory (SST)\nInvariant Master Mass Formula, structured similarly to VAM-MASS_FORMULA.py but\ngrounded strictly in the Canon “master equation”. The script provides three\ncalculation modes (see below) that change only topological-to-geometry inputs;\nthe invariant kernel is identical in all modes.\n\nModes (Computation Paths)\n-------------------------\n- exact_closure (default): fits the dimensionless quark geometry factors (s_u, s_d)\n  analytically so that the **proton and neutron** masses are matched exactly, while\n  preserving the electron-only geometric calibration. No extra scaling beyond\n  the Canon kernel is introduced.\n- canonical: strict Canon evaluation with a **single** electron calibration (fixes L_tot(e)).\n  Uses fixed (s_u, s_d) from hyperbolic-volume assignments; **no** baryon-sector\n  rescaling. Nucleon residuals reflect the direct Canon mapping.\n- sector_norm: keeps fixed (s_u, s_d) as in canonical, but introduces a **single**\n  baryon-sector normalization λ_b to make the **proton** exact; the neutron is predicted.\n\nWhat changes across modes?\n--------------------------\nOnly the **geometric inputs** to L_tot(T) for baryons:\n1) The invariant kernel\n       M(T) = (4/α)·b(T)^{-3/2}·φ^{-g(T)}·n(T)^{-1/φ} · [ (1/2)ρ_core v_swirl^2 ] · [ π r_c^3 L_tot(T) ] / c^2      (Eq. K)\n   is fixed and identical in all modes.\n2) The baryon ropelength mapping uses\n       L_tot = scaling_factor · Σ s_i,   with   scaling_factor = 2 π^2 κ_R,   κ_R ≈ 2.                          (Eq. L)\n   - **exact_closure**: (s_u, s_d) are solved from M_p, M_n using (Eq. K–L).\n   - **canonical**: (s_u, s_d) are fixed constants (from hyperbolic volumes).\n   - **sector_norm**: (s_u, s_d) fixed as canonical, and a single λ_b multiplies L_tot\n     in the baryon sector so that M_p is exact.\n\nMaster Equation (Canon)\n-----------------------\nDefine the swirl energy density\n    u = (1/2) ρ v_swirl^2.                                                                               (Eq. 0)\n\nThe SST mass mapping can be written compactly as\n    M = (4/α) · φ^{-1} · (u · V) / c^2,                                                                  (Eq. 1)\ni.e.\n    M = (4/α) · (1/φ) · [ (1/2) ρ v_swirl^2 · V ] / c^2.                                                 (Eq. 1′)\n\nHere V is the effective geometric/topological volume associated with the object.\nIn the invariant kernel actually used in code (Eq. K), V = π r_c^3 L_tot(T) with\nL_tot a **dimensionless ropelength** set by topology and the mode-specific mapping (Eq. L).\n\nSymbols:\n- α          : fine-structure constant\n- φ          : golden ratio\n- ρ, ρ_core  : effective density scale (default: ρ = ρ_core)\n- v_swirl    : characteristic swirl speed (Canon: v_swirl ≈ 1.09384563×10^6 m/s)\n- r_c        : core radius of the swirl string\n- c          : speed of light\n- b(T)       : braid index\n- g(T)       : Seifert genus\n- n(T)       : number of components\n- L_tot(T)   : total ropelength (dimensionless)\n\nGeometry\n--------\nA convenient reference geometry is the torus volume\n    V_torus(R, r) = 2 π^2 R r^2,                                                                         (Eq. 2)\nwith r set to r_c and R = κ_R r_c (κ_R ≈ 2). The ropelength proxy used by the\nCanon kernel (Eq. K) is V = π r_c^3 L_tot, consistent with dimensionless L_tot.\n\nCalibration Strategy\n--------------------\n- Electron-only geometric calibration: determine L_tot(e) so that the model exactly\n  reproduces M_e(actual). This fixes the absolute geometry scale for all modes.\n- Baryons: assemble L_tot via (Eq. L). Depending on mode, (s_u, s_d) are either\n  solved (exact_closure) or taken as fixed (canonical/sector_norm). In sector_norm\n  a single λ_b multiplies baryon L_tot to make the proton exact.\n\nOutputs\n-------\n- Console table with columns:\n      Object, Actual Mass (kg), Predicted Mass (kg), % Error\n- CSV: SST_Invariant_Mass_Results.csv\n- Optional cross-mode comparison (interactive prompt) appends:\n      Predicted Mass (kg) [CANON], % Error [CANON],\n      Predicted Mass (kg) [Sector Norm], % Error [Sector Norm]\n  to SST_Invariant_Mass_Results_all_modes.csv.\n\nUnits & Dimensional Check\n-------------------------\n- u = (1/2) ρ v_swirl^2 has units [J/m^3]; u·V has [J]; division by c^2 gives [kg].\n- The factors (4/α), φ^{-g(T)}, n(T)^{-1/φ}, b(T)^{-3/2} are dimensionless.\n\nReferences (BibTeX)\n-------------------\n@misc{SST_Canon_v0.3.0,\n  author       = {Omar Iskandarani},\n  title        = {Swirl String Theory (SST) Canon v0.3.0},\n  year         = {2025},\n  doi          = {10.5281/zenodo.16934536}\n}\n@misc{VAM_Canon_v0.4,\n  author     = {Omar Iskandarani},\n  title      = {VAM Canon (v0.4)},\n  year       = {2025}\n}\n@misc{VAM_Master_Formula_v8.5,\n  author     = {Omar Iskandarani},\n  title      = {The Vortex Æther Model (VAM): Master Mass Formula},\n  year       = {2025},\n  doi        = {10.5281/zenodo.15849355}\n}\n@article{Einstein1905,\n  author    = {Albert Einstein},\n  title     = {Ist die Trägheit eines Körpers von seinem Energieinhalt abhängig?},\n  journal   = {Annalen der Physik},\n  volume    = {323},\n  number    = {13},\n  pages     = {639--641},\n  year      = {1905},\n  doi       = {10.1002/andp.19053231314}\n}\n@book{Batchelor1967,\n  author    = {G. K. Batchelor},\n  title     = {An Introduction to Fluid Dynamics},\n  publisher = {Cambridge University Press},\n  year      = {1967}\n}\n@book{Saffman1992,\n  author    = {P. G. Saffman},\n  title     = {Vortex Dynamics},\n  publisher = {Cambridge University Press},\n  year      = {1992}\n}\n@article{CODATA2018,\n  author    = {P. J. Mohr and D. B. Newell and B. N. Taylor},\n  title     = {CODATA Recommended Values of the Fundamental Physical Constants: 2018},\n  journal   = {Reviews of Modern Physics},\n  volume    = {88},\n  pages     = {035009},\n  year      = {2016},\n  doi       = {10.1103/RevModPhys.88.035009}\n}",
    "functions": [
      {
        "name": "master_mass_invariant",
        "lineno": 203,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "solve_for_L_tot",
        "lineno": 223,
        "doc": "Generic function to solve for L_tot given a known mass and base topology.",
        "required_pos_args": 2
      },
      {
        "name": "baryon_prefactor",
        "lineno": 238,
        "doc": null,
        "required_pos_args": 3
      },
      {
        "name": "fit_quark_geom_factors_for_baryons",
        "lineno": 243,
        "doc": null,
        "required_pos_args": 4
      },
      {
        "name": "get_particle_topologies",
        "lineno": 254,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "emoji_marker",
        "lineno": 300,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "_elements_from_table",
        "lineno": 348,
        "doc": null,
        "required_pos_args": 0
      },
      {
        "name": "_parse_formula",
        "lineno": 355,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "compute_tables",
        "lineno": 363,
        "doc": null,
        "required_pos_args": 2
      },
      {
        "name": "main",
        "lineno": 399,
        "doc": null,
        "required_pos_args": 0
      }
    ],
    "classes": [
      {
        "name": "Config",
        "lineno": 180,
        "doc": null
      },
      {
        "name": "KnotTopology",
        "lineno": 192,
        "doc": null
      }
    ],
    "candidate": "main"
  },
  {
    "path": "SST_Mass_Invariant_3-modes/Swirl_String_TheoryCanon_Pipeline.py",
    "imports_streamlit": false,
    "module_doc": null,
    "functions": [
      {
        "name": "base_from_filename",
        "lineno": 49,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "hyperbolic_volume_for",
        "lineno": 55,
        "doc": "Returns the hyperbolic volume Vol_hyp(K) (dimensionless).\nIf SnapPy is available, computes it canonically.\nOtherwise falls back to a small table (extend as needed).",
        "required_pos_args": 1
      },
      {
        "name": "parse_fseries_multi",
        "lineno": 98,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "eval_fourier_block",
        "lineno": 119,
        "doc": null,
        "required_pos_args": 2
      },
      {
        "name": "polyline_length",
        "lineno": 128,
        "doc": null,
        "required_pos_args": 3
      },
      {
        "name": "L_from_fseries",
        "lineno": 133,
        "doc": null,
        "required_pos_args": 2
      },
      {
        "name": "crossing_from_name",
        "lineno": 150,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "genus_of",
        "lineno": 154,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "pick_k_canonical",
        "lineno": 160,
        "doc": null,
        "required_pos_args": 2
      },
      {
        "name": "vam_master_mass",
        "lineno": 169,
        "doc": "Mass = (4/alpha_fs) * eta * xi * tension * sum(V_i) * (0.5*rho_0*v_swirl^2) / c^2",
        "required_pos_args": 4
      },
      {
        "name": "xi_normalized",
        "lineno": 182,
        "doc": null,
        "required_pos_args": 6
      },
      {
        "name": "solve_alpha_from_mu",
        "lineno": 185,
        "doc": null,
        "required_pos_args": 4
      },
      {
        "name": "vam_electron_mass_helicity",
        "lineno": 190,
        "doc": null,
        "required_pos_args": 0
      },
      {
        "name": "emoji_marker",
        "lineno": 202,
        "doc": null,
        "required_pos_args": 1
      },
      {
        "name": "series",
        "lineno": 123,
        "doc": null,
        "required_pos_args": 2
      }
    ],
    "classes": [],
    "candidate": null
  }
]